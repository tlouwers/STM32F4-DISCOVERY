/**
 * \file    HI-M1388AR_Lib.hpp
 *
 * \licence "THE BEER-WARE LICENSE" (Revision 42):
 *          <terry.louwers@fourtress.nl> wrote this file. As long as you retain
 *          this notice you can do whatever you want with this stuff. If we
 *          meet some day, and you think this stuff is worth it, you can buy me
 *          a beer in return.
 *                                                                Terry Louwers
 *
 * \brief   Library of constants representing contents for the HI-M1388AR 8x8
 *          LED matrix display.
 *
 * \note    https://github.com/tlouwers/STM32F4-DISCOVERY/tree/develop/Drivers/components/HI-M1388AR
 *
 * \author  T. Louwers <terry.louwers@fourtress.nl>
 * \version 1.0
 * \date    05-2021
 */

#ifndef HI_M1388AR_LIB_HPP_
#define HI_M1388AR_LIB_HPP_

/************************************************************************/
/* Includes                                                             */
/************************************************************************/
#include <cstdint>


/************************************************************************/
/* Constants                                                            */
/************************************************************************/
/**
 * \brief   Helper constant indicating the rows of the 8x8 matrix display.
 */
static constexpr uint8_t MATRIX_SIZE = 8;

#ifndef DOXYGEN_SHOULD_SKIP_THIS

// Digits
constexpr uint8_t digit_one[MATRIX_SIZE]   = { 0x7E, 0x18, 0x18, 0x18, 0x1C, 0x18, 0x18, 0x00 };
constexpr uint8_t digit_two[MATRIX_SIZE]   = { 0x7E, 0x06, 0x0C, 0x30, 0x60, 0x66, 0x3C, 0x00 };
constexpr uint8_t digit_three[MATRIX_SIZE] = { 0x3C, 0x66, 0x60, 0x38, 0x60, 0x66, 0x3C, 0x00 };
constexpr uint8_t digit_four[MATRIX_SIZE]  = { 0x30, 0x30, 0x7E, 0x32, 0x34, 0x38, 0x30, 0x00 };
constexpr uint8_t digit_five[MATRIX_SIZE]  = { 0x3C, 0x66, 0x60, 0x60, 0x3E, 0x06, 0x7E, 0x00 };
constexpr uint8_t digit_six[MATRIX_SIZE]   = { 0x3C, 0x66, 0x66, 0x3E, 0x06, 0x66, 0x3C, 0x00 };
constexpr uint8_t digit_seven[MATRIX_SIZE] = { 0x18, 0x18, 0x18, 0x30, 0x30, 0x66, 0x7E, 0x00 };
constexpr uint8_t digit_eight[MATRIX_SIZE] = { 0x3C, 0x66, 0x66, 0x3C, 0x66, 0x66, 0x3C, 0x00 };
constexpr uint8_t digit_nine[MATRIX_SIZE]  = { 0x3C, 0x66, 0x60, 0x7C, 0x66, 0x66, 0x3C, 0x00 };
constexpr uint8_t digit_zero[MATRIX_SIZE]  = { 0x3C, 0x66, 0x66, 0x6E, 0x76, 0x66, 0x3C, 0x00 };

// Letters - capitals
constexpr uint8_t letter_A[MATRIX_SIZE] = { 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x3C, 0x00 };
constexpr uint8_t letter_B[MATRIX_SIZE] = { 0x3E, 0x66, 0x66, 0x3E, 0x66, 0x66, 0x3E, 0x00 };
constexpr uint8_t letter_C[MATRIX_SIZE] = { 0x3C, 0x66, 0x06, 0x06, 0x06, 0x66, 0x3C, 0x00 };
constexpr uint8_t letter_D[MATRIX_SIZE] = { 0x3E, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3E, 0x00 };
constexpr uint8_t letter_E[MATRIX_SIZE] = { 0x7E, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x7E, 0x00 };
constexpr uint8_t letter_F[MATRIX_SIZE] = { 0x06, 0x06, 0x06, 0x3E, 0x06, 0x06, 0x7E, 0x00 };
constexpr uint8_t letter_G[MATRIX_SIZE] = { 0x3C, 0x66, 0x76, 0x06, 0x06, 0x66, 0x3C, 0x00 };
constexpr uint8_t letter_H[MATRIX_SIZE] = { 0x66, 0x66, 0x66, 0x7E, 0x66, 0x66, 0x66, 0x00 };
constexpr uint8_t letter_I[MATRIX_SIZE] = { 0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00 };
constexpr uint8_t letter_J[MATRIX_SIZE] = { 0x1C, 0x36, 0x36, 0x30, 0x30, 0x30, 0x78, 0x00 };
constexpr uint8_t letter_K[MATRIX_SIZE] = { 0x66, 0x36, 0x1E, 0x0E, 0x1E, 0x36, 0x66, 0x00 };
constexpr uint8_t letter_L[MATRIX_SIZE] = { 0x7E, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x00 };
constexpr uint8_t letter_M[MATRIX_SIZE] = { 0xC6, 0xC6, 0xC6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00 };
constexpr uint8_t letter_N[MATRIX_SIZE] = { 0xC6, 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0x00 };
constexpr uint8_t letter_O[MATRIX_SIZE] = { 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x3C, 0x00 };
constexpr uint8_t letter_P[MATRIX_SIZE] = { 0x06, 0x06, 0x3E, 0x66, 0x66, 0x66, 0x3E, 0x00 };
constexpr uint8_t letter_Q[MATRIX_SIZE] = { 0x60, 0x3C, 0x76, 0x66, 0x66, 0x66, 0x3C, 0x00 };
constexpr uint8_t letter_R[MATRIX_SIZE] = { 0x66, 0x36, 0x1E, 0x3E, 0x66, 0x66, 0x3E, 0x00 };
constexpr uint8_t letter_S[MATRIX_SIZE] = { 0x3C, 0x66, 0x60, 0x3C, 0x06, 0x66, 0x3C, 0x00 };
constexpr uint8_t letter_T[MATRIX_SIZE] = { 0x18, 0x18, 0x18, 0x18, 0x18, 0x5A, 0x7E, 0x00 };
constexpr uint8_t letter_U[MATRIX_SIZE] = { 0x7C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00 };
constexpr uint8_t letter_V[MATRIX_SIZE] = { 0x18, 0x3C, 0x66, 0x66, 0x66, 0x66, 0x66, 0x00 };
constexpr uint8_t letter_W[MATRIX_SIZE] = { 0xC6, 0xEE, 0xFE, 0xD6, 0xC6, 0xC6, 0xC6, 0x00 };
constexpr uint8_t letter_X[MATRIX_SIZE] = { 0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00 };
constexpr uint8_t letter_Y[MATRIX_SIZE] = { 0x18, 0x18, 0x18, 0x3C, 0x66, 0x66, 0x66, 0x00 };
constexpr uint8_t letter_Z[MATRIX_SIZE] = { 0x7E, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x7E, 0x00 };

// Letters - small caps
constexpr uint8_t letter_a[MATRIX_SIZE] = { 0x7C, 0x66, 0x7C, 0x60, 0x3C, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_b[MATRIX_SIZE] = { 0x3E, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00 };
constexpr uint8_t letter_c[MATRIX_SIZE] = { 0x3C, 0x66, 0x06, 0x66, 0x3C, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_d[MATRIX_SIZE] = { 0x7C, 0x66, 0x66, 0x7C, 0x60, 0x60, 0x60, 0x00 };
constexpr uint8_t letter_e[MATRIX_SIZE] = { 0x3C, 0x06, 0x7E, 0x66, 0x3C, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_f[MATRIX_SIZE] = { 0x0C, 0x0C, 0x3E, 0x0C, 0x0C, 0x6C, 0x38, 0x00 };
constexpr uint8_t letter_g[MATRIX_SIZE] = { 0x3C, 0x60, 0x7C, 0x66, 0x66, 0x7C, 0x00, 0x00 };
constexpr uint8_t letter_h[MATRIX_SIZE] = { 0x66, 0x66, 0x66, 0x3E, 0x06, 0x06, 0x06, 0x00 };
constexpr uint8_t letter_i[MATRIX_SIZE] = { 0x3C, 0x18, 0x18, 0x18, 0x00, 0x18, 0x00, 0x00 };
constexpr uint8_t letter_j[MATRIX_SIZE] = { 0x1C, 0x36, 0x36, 0x30, 0x30, 0x00, 0x30, 0x00 };
constexpr uint8_t letter_k[MATRIX_SIZE] = { 0x66, 0x36, 0x1E, 0x36, 0x66, 0x06, 0x06, 0x00 };
constexpr uint8_t letter_l[MATRIX_SIZE] = { 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00 };
constexpr uint8_t letter_m[MATRIX_SIZE] = { 0xD6, 0xD6, 0xFE, 0xEE, 0xC6, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_n[MATRIX_SIZE] = { 0x66, 0x66, 0x66, 0x7E, 0x3E, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_o[MATRIX_SIZE] = { 0x3C, 0x66, 0x66, 0x66, 0x3C, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_p[MATRIX_SIZE] = { 0x06, 0x06, 0x3E, 0x66, 0x66, 0x3E, 0x00, 0x00 };
constexpr uint8_t letter_q[MATRIX_SIZE] = { 0xF0, 0xB0, 0x3C, 0x36, 0x36, 0x3C, 0x00, 0x00 };
constexpr uint8_t letter_r[MATRIX_SIZE] = { 0x06, 0x06, 0x66, 0x66, 0x3E, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_s[MATRIX_SIZE] = { 0x3E, 0x40, 0x3C, 0x02, 0x7C, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_t[MATRIX_SIZE] = { 0x18, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00 };
constexpr uint8_t letter_u[MATRIX_SIZE] = { 0x7C, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_v[MATRIX_SIZE] = { 0x18, 0x3C, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_w[MATRIX_SIZE] = { 0x7C, 0xD6, 0xD6, 0xD6, 0xC6, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_x[MATRIX_SIZE] = { 0x66, 0x3C, 0x18, 0x3C, 0x66, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_y[MATRIX_SIZE] = { 0x3C, 0x60, 0x7C, 0x66, 0x66, 0x00, 0x00, 0x00 };
constexpr uint8_t letter_z[MATRIX_SIZE] = { 0x3C, 0x0C, 0x18, 0x30, 0x3C, 0x00, 0x00, 0x00 };

// Symbols
constexpr uint8_t symbol_smiley[MATRIX_SIZE]        = { 0x3C, 0x42, 0x99, 0xA5, 0x81, 0xA5, 0x42, 0x3C };
constexpr uint8_t symbol_sadface[MATRIX_SIZE]       = { 0x3C, 0x42, 0xA5, 0x99, 0x81, 0xA5, 0x42, 0x3C };
constexpr uint8_t symbol_question_mark[MATRIX_SIZE] = { 0x18, 0x00, 0x18, 0x38, 0x60, 0x66, 0x3C, 0x00 };

// Edges
constexpr uint8_t edge_up[MATRIX_SIZE]    = { 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
constexpr uint8_t edge_down[MATRIX_SIZE]  = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF };
constexpr uint8_t edge_left[MATRIX_SIZE]  = { 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80 };
constexpr uint8_t edge_right[MATRIX_SIZE] = { 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };

#endif DOXYGEN_SHOULD_SKIP_THIS


#endif  // HI_M1388AR_LIB_HPP_
